
"""
üéØ P√≠ldora Interactiva: Data Cleaning Avanzado en Python
========================================================

Script principal para la presentaci√≥n interactiva de la p√≠ldora.
Incluye men√∫ de navegaci√≥n, ejemplos en vivo y visualizaciones.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
import os
import sys
warnings.filterwarnings('ignore')

# Configurar visualizaciones
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

# Importar m√≥dulos de la p√≠ldora
try:
    from deteccion_outliers import (
        crear_datos_ejemplo, detectar_outliers_zscore, 
        detectar_outliers_iqr, detectar_outliers_isolation_forest,
        comparar_metodos_outliers, visualizar_outliers
    )
    from limpieza_texto import (
        LimpiadorTexto, crear_datos_sucios,
        demostrar_limpieza_telefonos, demostrar_limpieza_emails,
        demostrar_limpieza_nombres, demostrar_limpieza_html
    )
    from casos_practicos import (
        LimpiadorEcommerce, LimpiadorTemporal,
        crear_datos_ecommerce_sucios, crear_datos_temporales_sucios,
        caso_ecommerce, caso_temporal
    )
    from pipeline_automatizado import (
        DataCleaner, ValidadorCalidad, crear_datos_demo, demostrar_pipeline
    )
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Aseg√∫rate de que todos los archivos est√©n en el mismo directorio")
    sys.exit(1)

class PresentacionInteractiva:
    """Clase principal para manejar la presentaci√≥n interactiva"""
    
    def __init__(self):
        self.datos_cargados = {}
        self.resultados = {}
        self.configuracion = {
            'mostrar_graficos': True,
            'pausar_entre_secciones': True,
            'guardar_resultados': True
        }
    
    def limpiar_pantalla(self):
        """Limpia la pantalla de la consola"""
        os.system('clear' if os.name == 'posix' else 'cls')
    
    def pausar(self, mensaje="Presiona Enter para continuar..."):
        """Pausa la ejecuci√≥n esperando input del usuario"""
        if self.configuracion['pausar_entre_secciones']:
            input(f"\n{mensaje}")
    
    def mostrar_titulo(self, titulo, caracter="="):
        """Muestra un t√≠tulo formateado"""
        print(f"\n{caracter * 60}")
        print(f"{titulo}")
        print(f"{caracter * 60}")
    
    def cargar_datos_demo(self):
        """Carga los datasets de demostraci√≥n"""
        print("üìä Cargando datasets de demostraci√≥n...")
        
        try:
            # Cargar datasets desde archivos CSV
            self.datos_cargados = {
                'ecommerce': pd.read_csv('datos_ejemplo/ecommerce_sucio.csv'),
                'clientes': pd.read_csv('datos_ejemplo/clientes_sucio.csv'),
                'temporal': pd.read_csv('datos_ejemplo/temporal_sucio.csv'),
                'outliers': pd.read_csv('datos_ejemplo/outliers_demo.csv')
            }
            
            print("‚úÖ Datasets cargados exitosamente:")
            for nombre, df in self.datos_cargados.items():
                print(f"  üì¶ {nombre}: {len(df)} filas, {len(df.columns)} columnas")
            
        except FileNotFoundError:
            print("‚ö†Ô∏è Archivos de datos no encontrados. Creando datasets...")
            # Crear datasets si no existen
            from datos_ejemplo.crear_datasets_demo import guardar_datasets
            guardar_datasets()
            self.cargar_datos_demo()
    
    def introduccion(self):
        """Introducci√≥n de la presentaci√≥n"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üéØ P√çLDORA: DATA CLEANING AVANZADO EN PYTHON")
        
        print("¬°Hola a todos! üëã")
        print()
        print("Mi compa√±ero nos ha mostrado los fundamentos del data cleaning.")
        print("Ahora vamos a ver t√©cnicas m√°s avanzadas que realmente marcan")
        print("la diferencia en la calidad de tus an√°lisis.")
        print()
        print("üîç LO QUE VAMOS A APRENDER:")
        print("‚Ä¢ Detecci√≥n inteligente de outliers")
        print("‚Ä¢ Limpieza de texto con regex avanzadas")
        print("‚Ä¢ Casos pr√°cticos del mundo real")
        print("‚Ä¢ Pipeline automatizado y reutilizable")
        print("‚Ä¢ Buenas pr√°cticas de documentaci√≥n")
        print()
        print("‚è±Ô∏è Duraci√≥n: 30 minutos")
        print("üéØ Objetivo: T√©cnicas que usar√°s en proyectos reales")
        print()
        
        self.pausar("¬øListo para comenzar? Presiona Enter...")
    
    def parte_1_outliers(self):
        """Parte 1: Detecci√≥n de Outliers"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üîç PARTE 1: DETECCI√ìN INTELIGENTE DE OUTLIERS")
        
        print("Los outliers pueden arruinar tu an√°lisis. Vamos a ver c√≥mo")
        print("detectarlos de manera inteligente usando diferentes m√©todos.")
        print()
        
        # Usar datos de outliers
        df = self.datos_cargados['outliers']
        columnas_numericas = ['precio', 'cantidad', 'descuento', 'edad_cliente', 'satisfaccion']
        
        print(f"üìä Dataset: {len(df)} registros")
        print(f"üìà Columnas num√©ricas: {', '.join(columnas_numericas)}")
        print()
        
        # Mostrar estad√≠sticas b√°sicas
        print("üìà ESTAD√çSTICAS B√ÅSICAS:")
        print(df[columnas_numericas].describe().round(2))
        print()
        
        # Comparar m√©todos
        print("üîç COMPARANDO M√âTODOS DE DETECCI√ìN:")
        df_comparacion = comparar_metodos_outliers(df, columnas_numericas)
        
        print("\nüí° CU√ÅNDO USAR CADA M√âTODO:")
        print("‚Ä¢ Z-Score: Datos normalmente distribuidos")
        print("‚Ä¢ IQR: Datos con distribuci√≥n sesgada")
        print("‚Ä¢ Isolation Forest: M√∫ltiples variables (recomendado)")
        print()
        
        # Guardar resultados
        self.resultados['outliers'] = df_comparacion
        
        self.pausar("Presiona Enter para continuar...")
        return df_comparacion
    
    def parte_2_limpieza_texto(self):
        """Parte 2: Limpieza de Texto"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üßπ PARTE 2: LIMPIEZA DE TEXTO CON REGEX")
        
        print("Los datos de texto son los m√°s sucios. Vamos a ver c√≥mo")
        print("limpiarlos usando expresiones regulares y t√©cnicas avanzadas.")
        print()
        
        # Usar datos de clientes
        df = self.datos_cargados['clientes']
        limpiador = LimpiadorTexto()
        
        print("üìû LIMPIEZA DE TEL√âFONOS:")
        df['telefono_limpio'] = df['telefono'].apply(limpiador.limpiar_telefono)
        print(f"Tel√©fonos v√°lidos: {df['telefono_limpio'].notna().sum()}/{len(df)}")
        print()
        
        print("üìß LIMPIEZA DE EMAILS:")
        df['email_limpio'] = df['email'].apply(limpiador.limpiar_email)
        print(f"Emails v√°lidos: {df['email_limpio'].notna().sum()}/{len(df)}")
        print()
        
        print("üë§ LIMPIEZA DE NOMBRES:")
        df['nombre_limpio'] = df['nombre'].apply(limpiador.limpiar_nombre)
        print(f"Nombres v√°lidos: {df['nombre_limpio'].notna().sum()}/{len(df)}")
        print()
        
        print("üè† LIMPIEZA DE DIRECCIONES:")
        df['direccion_limpia'] = df['direccion'].apply(limpiador.limpiar_direccion)
        print(f"Direcciones v√°lidas: {df['direccion_limpia'].notna().sum()}/{len(df)}")
        print()
        
        print("üîß PATRONES REGEX CLAVE:")
        print("‚Ä¢ Tel√©fonos: r'^(\\+34|0034|34)?[6-9]\\d{8}$'")
        print("‚Ä¢ Emails: r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'")
        print("‚Ä¢ HTML: r'<[^>]+>' (eliminar etiquetas)")
        print()
        
        # Guardar resultados
        self.resultados['texto'] = df
        
        self.pausar("Presiona Enter para continuar...")
        return df
    
    def parte_3_casos_practicos(self):
        """Parte 3: Casos Pr√°cticos"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üéØ PARTE 3: CASOS PR√ÅCTICOS COMPLEJOS")
        
        print("Ahora vamos a ver casos reales que encontrar√°s en el trabajo:")
        print("datos de e-commerce y series temporales.")
        print()
        
        # Caso E-commerce
        print("üõí CASO 1: DATASET DE E-COMMERCE")
        print("-" * 40)
        print("Problemas t√≠picos:")
        print("‚Ä¢ Precios en diferentes monedas")
        print("‚Ä¢ Categor√≠as inconsistentes")
        print("‚Ä¢ Descripciones con HTML")
        print()
        
        df_ecommerce = self.datos_cargados['ecommerce']
        limpiador_ecommerce = LimpiadorEcommerce()
        
        # Aplicar limpiezas
        df_ecommerce['precio_normalizado'] = df_ecommerce['precio'].apply(limpiador_ecommerce.normalizar_precio)
        df_ecommerce['categoria_limpia'] = df_ecommerce['categoria'].apply(limpiador_ecommerce.limpiar_categoria)
        df_ecommerce['descripcion_limpia'] = df_ecommerce['descripcion'].apply(limpiador_ecommerce.limpiar_descripcion)
        
        print(f"Precios normalizados: {df_ecommerce['precio_normalizado'].notna().sum()}/{len(df_ecommerce)}")
        print(f"Categor√≠as √∫nicas: {df_ecommerce['categoria_limpia'].nunique()}")
        print()
        
        # Caso Temporal
        print("‚è∞ CASO 2: DATOS TEMPORALES")
        print("-" * 40)
        print("Problemas t√≠picos:")
        print("‚Ä¢ Timestamps en diferentes formatos")
        print("‚Ä¢ Zonas horarias inconsistentes")
        print("‚Ä¢ Gaps temporales")
        print()
        
        df_temporal = self.datos_cargados['temporal']
        limpiador_temporal = LimpiadorTemporal()
        
        # Parsear fechas
        df_temporal['timestamp_parsed'] = df_temporal['timestamp'].apply(limpiador_temporal.parsear_fecha_flexible)
        print(f"Fechas parseadas: {df_temporal['timestamp_parsed'].notna().sum()}/{len(df_temporal)}")
        print()
        
        print("üí° LECCIONES CLAVE:")
        print("‚Ä¢ E-commerce: Normalizar monedas y categor√≠as")
        print("‚Ä¢ Temporal: Detectar frecuencia y rellenar gaps")
        print("‚Ä¢ Siempre validar antes de procesar")
        print()
        
        # Guardar resultados
        self.resultados['casos'] = {
            'ecommerce': df_ecommerce,
            'temporal': df_temporal
        }
        
        self.pausar("Presiona Enter para continuar...")
        return df_ecommerce, df_temporal
    
    def parte_4_pipeline(self):
        """Parte 4: Pipeline Automatizado"""
        self.limpiar_pantalla()
        self.mostrar_titulo("‚öôÔ∏è PARTE 4: PIPELINE AUTOMATIZADO")
        
        print("La clave del √©xito: automatizar y documentar todo.")
        print("Vamos a ver c√≥mo crear un pipeline reutilizable.")
        print()
        
        # Crear datos de demostraci√≥n
        df_demo = crear_datos_demo()
        print(f"üìä Datos de demostraci√≥n: {len(df_demo)} filas")
        print(f"‚ùå Valores nulos: {df_demo.isnull().sum().sum()}")
        print(f"üîÑ Duplicados: {df_demo.duplicated().sum()}")
        print()
        
        # Configurar pipeline
        config = {
            'eliminar_duplicados': True,
            'manejar_nulos': True,
            'estandarizar_texto': True,
            'detectar_outliers': True,
            'validar_formatos': True,
            'metodo_imputacion': 'median',
            'umbral_outliers': 2.5
        }
        
        # Crear limpiador
        limpiador = DataCleaner(config)
        
        # Aplicar limpieza
        print("üöÄ Ejecutando pipeline...")
        df_limpio = limpiador.fit_transform(df_demo)
        
        print(f"‚úÖ Pipeline completado:")
        print(f"  üìä Filas finales: {len(df_limpio)}")
        print(f"  ‚ùå Valores nulos: {df_limpio.isnull().sum().sum()}")
        print(f"  üîÑ Duplicados: {df_limpio.duplicated().sum()}")
        print()
        
        # Generar reporte
        reporte = limpiador.generar_reporte()
        print("üìä REPORTE DE LIMPIEZA:")
        print(f"  üóëÔ∏è Filas eliminadas: {reporte['resumen']['filas_eliminadas']}")
        print(f"  üîß Nulos imputados: {reporte['resumen']['nulos_imputados']}")
        print(f"  ‚öôÔ∏è Transformaciones: {reporte['resumen']['transformaciones_aplicadas']}")
        print()
        
        # Guardar resultados
        self.resultados['pipeline'] = {
            'datos_limpios': df_limpio,
            'reporte': reporte
        }
        
        self.pausar("Presiona Enter para continuar...")
        return df_limpio, reporte
    
    def conclusion(self):
        """Conclusi√≥n de la presentaci√≥n"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üéâ CONCLUSI√ìN Y PR√ìXIMOS PASOS")
        
        print("¬°Excelente trabajo! Hemos cubierto las t√©cnicas m√°s importantes")
        print("de data cleaning avanzado en Python.")
        print()
        print("üìö RESUMEN DE LO APRENDIDO:")
        print("‚úÖ Detecci√≥n inteligente de outliers")
        print("‚úÖ Limpieza de texto con regex")
        print("‚úÖ Casos pr√°cticos reales")
        print("‚úÖ Pipeline automatizado")
        print("‚úÖ Buenas pr√°cticas de documentaci√≥n")
        print()
        print("üöÄ PR√ìXIMOS PASOS:")
        print("1. Practica con tus propios datasets")
        print("2. Adapta el pipeline a tus necesidades")
        print("3. Comparte conocimiento con tu equipo")
        print("4. Mant√©n actualizada tu documentaci√≥n")
        print()
        print("üí° RECUERDA:")
        print("‚Ä¢ La calidad de los datos determina la calidad del an√°lisis")
        print("‚Ä¢ Automatiza todo lo que puedas")
        print("‚Ä¢ Documenta cada decisi√≥n")
        print("‚Ä¢ Valida siempre los resultados")
        print()
        print("‚ùì ¬øPREGUNTAS?")
        print("Estoy aqu√≠ para ayudarte con cualquier duda.")
        print()
        print("¬°Gracias por tu atenci√≥n! üôè")
    
    def menu_principal(self):
        """Men√∫ principal de la presentaci√≥n"""
        while True:
            self.limpiar_pantalla()
            self.mostrar_titulo("üéØ P√çLDORA: DATA CLEANING AVANZADO EN PYTHON")
            
            print("Selecciona una opci√≥n:")
            print("1. üöÄ Presentaci√≥n completa (30 min)")
            print("2. ‚ö° Demo r√°pida (10 min)")
            print("3. üîç Solo detecci√≥n de outliers")
            print("4. üßπ Solo limpieza de texto")
            print("5. üéØ Solo casos pr√°cticos")
            print("6. ‚öôÔ∏è Solo pipeline automatizado")
            print("7. üìä Ver datasets disponibles")
            print("8. ‚ùå Salir")
            print()
            
            opcion = input("Ingresa tu opci√≥n (1-8): ").strip()
            
            if opcion == "1":
                self.ejecutar_presentacion_completa()
            elif opcion == "2":
                self.ejecutar_demo_rapida()
            elif opcion == "3":
                self.parte_1_outliers()
            elif opcion == "4":
                self.parte_2_limpieza_texto()
            elif opcion == "5":
                self.parte_3_casos_practicos()
            elif opcion == "6":
                self.parte_4_pipeline()
            elif opcion == "7":
                self.mostrar_datasets()
            elif opcion == "8":
                print("¬°Hasta luego! üëã")
                break
            else:
                print("‚ùå Opci√≥n no v√°lida. Intenta de nuevo.")
                self.pausar("Presiona Enter para continuar...")
    
    def ejecutar_presentacion_completa(self):
        """Ejecuta la presentaci√≥n completa"""
        print("üöÄ INICIANDO PRESENTACI√ìN COMPLETA")
        print("Duraci√≥n estimada: 30 minutos")
        print()
        
        # Cargar datos
        self.cargar_datos_demo()
        
        # Introducci√≥n
        self.introduccion()
        
        # Partes de la presentaci√≥n
        self.parte_1_outliers()
        self.parte_2_limpieza_texto()
        self.parte_3_casos_practicos()
        self.parte_4_pipeline()
        
        # Conclusi√≥n
        self.conclusion()
        
        print("\nüéâ ¬°Presentaci√≥n completada!")
        self.pausar("Presiona Enter para volver al men√∫...")
    
    def ejecutar_demo_rapida(self):
        """Ejecuta una demostraci√≥n r√°pida"""
        self.limpiar_pantalla()
        self.mostrar_titulo("‚ö° DEMO R√ÅPIDA: DATA CLEANING AVANZADO")
        
        print("Versi√≥n condensada para demostraci√≥n r√°pida")
        print()
        
        # Cargar datos
        self.cargar_datos_demo()
        
        # Demo r√°pida de outliers
        print("üîç DETECCI√ìN DE OUTLIERS:")
        df_outliers = self.datos_cargados['outliers']
        df_resultado = detectar_outliers_isolation_forest(df_outliers, ['precio', 'cantidad'])
        print(f"Outliers detectados: {df_resultado['outlier_isolation'].sum()}")
        print()
        
        # Demo r√°pida de limpieza de texto
        print("üßπ LIMPIEZA DE TEXTO:")
        limpiador = LimpiadorTexto()
        df_texto = self.datos_cargados['clientes']
        df_texto['telefono_limpio'] = df_texto['telefono'].apply(limpiador.limpiar_telefono)
        print(f"Tel√©fonos v√°lidos: {df_texto['telefono_limpio'].notna().sum()}")
        print()
        
        # Demo r√°pida de pipeline
        print("‚öôÔ∏è PIPELINE AUTOMATIZADO:")
        df_demo = crear_datos_demo()
        cleaner = DataCleaner()
        df_limpio = cleaner.fit_transform(df_demo)
        print(f"Pipeline completado: {len(df_limpio)} filas procesadas")
        print()
        
        print("‚úÖ Demo completada!")
        self.pausar("Presiona Enter para volver al men√∫...")
    
    def mostrar_datasets(self):
        """Muestra informaci√≥n sobre los datasets disponibles"""
        self.limpiar_pantalla()
        self.mostrar_titulo("üìä DATASETS DISPONIBLES")
        
        if not self.datos_cargados:
            self.cargar_datos_demo()
        
        for nombre, df in self.datos_cargados.items():
            print(f"üì¶ {nombre.upper()}:")
            print(f"  Filas: {len(df)}")
            print(f"  Columnas: {len(df.columns)}")
            print(f"  Columnas: {', '.join(df.columns[:5])}{'...' if len(df.columns) > 5 else ''}")
            print()
        
        self.pausar("Presiona Enter para volver al men√∫...")
    
    def ejecutar(self):
        """Ejecuta la presentaci√≥n interactiva"""
        print("üéØ Iniciando P√≠ldora de Data Cleaning Avanzado...")
        self.cargar_datos_demo()
        self.menu_principal()

def main():
    """Funci√≥n principal"""
    try:
        presentacion = PresentacionInteractiva()
        presentacion.ejecutar()
    except KeyboardInterrupt:
        print("\n\nüëã Presentaci√≥n interrumpida. ¬°Hasta luego!")
    except Exception as e:
        print(f"\n‚ùå Error durante la presentaci√≥n: {e}")
        print("Por favor, verifica que todos los archivos est√©n presentes.")

if __name__ == "__main__":
    main()
