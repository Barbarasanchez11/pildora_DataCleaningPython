"""
P√≠ldora: Data Cleaning Avanzado en Python
==========================================

Archivo principal con gui√≥n completo de presentaci√≥n
Incluye todos los ejemplos y casos pr√°cticos integrados
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Importar m√≥dulos de la p√≠ldora
from deteccion_outliers import (
    crear_datos_ejemplo, detectar_outliers_zscore, 
    detectar_outliers_iqr, detectar_outliers_isolation_forest,
    comparar_metodos_outliers, visualizar_outliers
)

from limpieza_texto import (
    LimpiadorTexto, crear_datos_sucios,
    demostrar_limpieza_telefonos, demostrar_limpieza_emails,
    demostrar_limpieza_nombres, demostrar_limpieza_html
)

from casos_practicos import (
    LimpiadorEcommerce, LimpiadorTemporal,
    crear_datos_ecommerce_sucios, crear_datos_temporales_sucios,
    caso_ecommerce, caso_temporal
)

from pipeline_automatizado import (
    DataCleaner, ValidadorCalidad, crear_datos_demo, demostrar_pipeline
)

def introduccion():
    """Introducci√≥n de la presentaci√≥n (2 minutos)"""
    print("P√çLDORA: DATA CLEANING AVANZADO EN PYTHON")
    print("=" * 60)
    print()
    print("¬°Hola a todos! üëã")
    print()
    print("Mi compa√±ero nos ha mostrado los fundamentos del data cleaning.")
    print("Ahora vamos a ver t√©cnicas m√°s avanzadas que usar√°s en proyectos")
    print("reales del d√≠a a d√≠a. Estas son las herramientas que realmente")
    print("marcan la diferencia en la calidad de tus an√°lisis.")
    print()
    print("AGENDA DE HOY:")
    print("‚Ä¢ T√©cnicas Avanzadas de Limpieza (15 min)")
    print("‚Ä¢ Casos Pr√°cticos Complejos (10 min)")
    print("‚Ä¢ Automatizaci√≥n y Buenas Pr√°cticas (5 min)")
    print()
    input("Presiona Enter para continuar...")

def parte_1_deteccion_outliers():
    """Parte 1: Detecci√≥n Inteligente de Outliers (8 min)"""
    print("\n" + "="*60)
    print("PARTE 1: DETECCI√ìN INTELIGENTE DE OUTLIERS")
    print("="*60)
    print()
    print("Los outliers pueden arruinar tu an√°lisis. Vamos a ver c√≥mo")
    print("detectarlos de manera inteligente usando diferentes m√©todos.")
    print()
    
    # Crear datos de ejemplo
    print("Creando dataset de ejemplo con outliers")
    df = crear_datos_ejemplo()
    columnas_numericas = ['precio', 'cantidad', 'descuento', 'edad_cliente']
    
    print(f"Dataset: {len(df)} registros")
    print(f"Columnas: {', '.join(columnas_numericas)}")
    print()
    
    # Mostrar estad√≠sticas b√°sicas
    print("ESTAD√çSTICAS B√ÅSICAS:")
    print(df[columnas_numericas].describe().round(2))
    print()
    
    # Comparar m√©todos
    print(" COMPARANDO M√âTODOS DE DETECCI√ìN:")
    df_comparacion = comparar_metodos_outliers(df, columnas_numericas)
    
    print("CU√ÅNDO USAR CADA M√âTODO:")
    print("‚Ä¢ Z-Score: Datos normalmente distribuidos")
    print("‚Ä¢ IQR: Datos con distribuci√≥n sesgada")
    print("‚Ä¢ Isolation Forest: M√∫ltiples variables (recomendado)")
    print()
    
    input("Presiona Enter para continuar...")
    return df_comparacion

def parte_2_limpieza_texto():
    """Parte 2: Regex para Limpieza de Texto (7 min)"""
    print("\n" + "="*60)
    print("üßπ PARTE 2: LIMPIEZA DE TEXTO CON REGEX")
    print("="*60)
    print()
    print("Los datos de texto son los m√°s sucios. Vamos a ver c√≥mo")
    print("limpiarlos usando expresiones regulares y t√©cnicas avanzadas.")
    print()
    
    # Demostrar limpieza de tel√©fonos
    print("LIMPIEZA DE TEL√âFONOS:")
    df_telefonos = demostrar_limpieza_telefonos()
    print()
    
    # Demostrar limpieza de emails
    print("LIMPIEZA DE EMAILS:")
    df_emails = demostrar_limpieza_emails()
    print()
    
    # Demostrar limpieza de nombres
    print("LIMPIEZA DE NOMBRES:")
    df_nombres = demostrar_limpieza_nombres()
    print()
    
    # Demostrar limpieza de HTML
    print("LIMPIEZA DE HTML:")
    df_html = demostrar_limpieza_html()
    print()
    
    print("PATRONES REGEX CLAVE:")
    print("‚Ä¢ Tel√©fonos: r'^(\+34|0034|34)?[6-9]\d{8}$'")
    print("‚Ä¢ Emails: r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'")
    print("‚Ä¢ HTML: r'<[^>]+>' (eliminar etiquetas)")
    print()
    
    input("Presiona Enter para continuar...")
    return df_telefonos, df_emails, df_nombres, df_html

def parte_3_casos_practicos():
    """Parte 3: Casos Pr√°cticos Complejos (10 min)"""
    print("\n" + "="*60)
    print("PARTE 3: CASOS PR√ÅCTICOS COMPLEJOS")
    print("="*60)
    print()
    print("Ahora vamos a ver casos reales que encontrar√°s en el trabajo:")
    print("datos de e-commerce y series temporales.")
    print()
    
    # Caso E-commerce
    print("CASO 1: DATASET DE E-COMMERCE")
    print("-" * 40)
    print("Problemas t√≠picos:")
    print("‚Ä¢ Precios en diferentes monedas")
    print("‚Ä¢ Categor√≠as inconsistentes")
    print("‚Ä¢ Descripciones con HTML")
    print()
    
    df_ecommerce = caso_ecommerce()
    print()
    
    # Caso Temporal
    print("CASO 2: DATOS TEMPORALES")
    print("-" * 40)
    print("Problemas t√≠picos:")
    print("‚Ä¢ Timestamps en diferentes formatos")
    print("‚Ä¢ Zonas horarias inconsistentes")
    print("‚Ä¢ Gaps temporales")
    print()
    
    df_temporal = caso_temporal()
    print()
    
    print("LECCIONES CLAVE:")
    print("‚Ä¢ E-commerce: Normalizar monedas y categor√≠as")
    print("‚Ä¢ Temporal: Detectar frecuencia y rellenar gaps")
    print("‚Ä¢ Siempre validar antes de procesar")
    print()
    
    input("Presiona Enter para continuar...")
    return df_ecommerce, df_temporal

def parte_4_pipeline_automatizado():
    """Parte 4: Pipeline Automatizado (5 min)"""
    print("\n" + "="*60)
    print("PARTE 4: PIPELINE AUTOMATIZADO")
    print("="*60)
    print()
    print("La clave del √©xito: automatizar y documentar todo.")
    print("Vamos a ver c√≥mo crear un pipeline reutilizable.")
    print()
    
    # Demostrar pipeline
    print("DEMOSTRANDO PIPELINE AUTOMATIZADO:")
    df_limpio, reporte = demostrar_pipeline()
    print()
    
    print("CARACTER√çSTICAS DEL PIPELINE:")
    print("‚Ä¢ Configuraci√≥n flexible")
    print("‚Ä¢ Logging detallado")
    print("‚Ä¢ Validaci√≥n autom√°tica")
    print("‚Ä¢ Reportes documentados")
    print("‚Ä¢ Manejo de errores robusto")
    print()
    
    print("MEJORES PR√ÅCTICAS:")
    print("‚Ä¢ Documenta todas las decisiones")
    print("‚Ä¢ Prueba con datos reales")
    print("‚Ä¢ Mant√©n logs de transformaciones")
    print("‚Ä¢ Valida calidad autom√°ticamente")
    print()
    
    input("Presiona Enter para continuar...")
    return df_limpio, reporte

def conclusion():
    """Conclusi√≥n de la presentaci√≥n"""
    print("\n" + "="*60)
    print("CONCLUSI√ìN Y PR√ìXIMOS PASOS")
    print("="*60)
    print()
    print("¬°Excelente trabajo! Hemos cubierto las t√©cnicas m√°s importantes")
    print("de data cleaning avanzado en Python.")
    print()
    print("RESUMEN DE LO APRENDIDO:")
    print("Detecci√≥n inteligente de outliers")
    print("Limpieza de texto con regex")
    print("Casos pr√°cticos reales")
    print("Pipeline automatizado")
    print("Buenas pr√°cticas de documentaci√≥n")
    print()
    print(" PR√ìXIMOS PASOS:")
    print("1. Practica con tus propios datasets")
    print("2. Adapta el pipeline a tus necesidades")
    print("3. Comparte conocimiento con tu equipo")
    print("4. Mant√©n actualizada tu documentaci√≥n")
    print()
    print(" ¬øPREGUNTAS?")
    print("Estoy aqu√≠ para ayudarte con cualquier duda.")
    print()
    print("¬°Gracias por tu atenci√≥n!")

def ejecutar_presentacion_completa():
    """Ejecuta la presentaci√≥n completa"""
    print("INICIANDO PRESENTACI√ìN COMPLETA")
    print("=" * 60)
    print()
    print("Esta es la p√≠ldora completa de Data Cleaning Avanzado en Python.")
    print("Duraci√≥n estimada: 30 minutos")
    print()
    
    # Introducci√≥n
    introduccion()
    
    # Parte 1: Detecci√≥n de Outliers
    df_outliers = parte_1_deteccion_outliers()
    
    # Parte 2: Limpieza de Texto
    df_telefonos, df_emails, df_nombres, df_html = parte_2_limpieza_texto()
    
    # Parte 3: Casos Pr√°cticos
    df_ecommerce, df_temporal = parte_3_casos_practicos()
    
    # Parte 4: Pipeline Automatizado
    df_limpio, reporte = parte_4_pipeline_automatizado()
    
    # Conclusi√≥n
    conclusion()
    
    return {
        'outliers': df_outliers,
        'texto': (df_telefonos, df_emails, df_nombres, df_html),
        'casos': (df_ecommerce, df_temporal),
        'pipeline': (df_limpio, reporte)
    }

def ejecutar_demo_rapida():
    """Ejecuta una demostraci√≥n r√°pida (10 minutos)"""
    print("‚ö° DEMO R√ÅPIDA: DATA CLEANING AVANZADO")
    print("=" * 50)
    print()
    print("Versi√≥n condensada para demostraci√≥n r√°pida")
    print()
    
    # Crear datos de ejemplo
    print("Creando datos de ejemplo...")
    df = crear_datos_ejemplo()
    
    # Detecci√≥n de outliers
    print("Detectando outliers...")
    df_outliers = detectar_outliers_isolation_forest(df, ['precio', 'cantidad'])
    print(f"Outliers detectados: {df_outliers['outlier_isolation'].sum()}")
    
    # Limpieza de texto
    print("Limpiando texto...")
    limpiador = LimpiadorTexto()
    df_texto = crear_datos_sucios()
    df_texto['telefono_limpio'] = df_texto['telefono'].apply(limpiador.limpiar_telefono)
    print(f"Tel√©fonos v√°lidos: {df_texto['telefono_limpio'].notna().sum()}")
    
    # Pipeline automatizado
    print("Ejecutando pipeline...")
    df_demo = crear_datos_demo()
    cleaner = DataCleaner()
    df_limpio = cleaner.fit_transform(df_demo)
    print(f"Pipeline completado: {len(df_limpio)} filas procesadas")
    
    print("Demo completada!")
    return df_limpio

def main():
    """Funci√≥n principal con men√∫ de opciones"""
    print("P√çLDORA: DATA CLEANING AVANZADO EN PYTHON")
    print("=" * 60)
    print()
    print("Selecciona una opci√≥n:")
    print("1. Presentaci√≥n completa (30 min)")
    print("2. Demo r√°pida (10 min)")
    print("3. Solo detecci√≥n de outliers")
    print("4. Solo limpieza de texto")
    print("5. Solo casos pr√°cticos")
    print("6. Solo pipeline automatizado")
    print()
    
    opcion = input("Ingresa tu opci√≥n (1-6): ").strip()
    
    if opcion == "1":
        resultado = ejecutar_presentacion_completa()
    elif opcion == "2":
        resultado = ejecutar_demo_rapida()
    elif opcion == "3":
        print("DETECCI√ìN DE OUTLIERS")
        df = crear_datos_ejemplo()
        resultado = comparar_metodos_outliers(df, ['precio', 'cantidad', 'descuento'])
    elif opcion == "4":
        print("LIMPIEZA DE TEXTO")
        resultado = demostrar_limpieza_telefonos()
    elif opcion == "5":
        print("CASOS PR√ÅCTICOS")
        resultado = caso_ecommerce()
    elif opcion == "6":
        print("PIPELINE AUTOMATIZADO")
        resultado = demostrar_pipeline()
    else:
        print("Opci√≥n no v√°lida. Ejecutando demo r√°pida...")
        resultado = ejecutar_demo_rapida()
    
    return resultado

if __name__ == "__main__":
    # Ejecutar presentaci√≥n
    resultado = main()
